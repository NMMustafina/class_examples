/* Задача 10: Создание класса "Pet"
Описание задачи:

Создай класс Pet, который будет представлять домашнее животное.
В классе должны быть следующие поля:
type (строка) — тип животного (например, "собака", "кошка").
name (строка) — кличка животного.
hungerLevel (целое число) — уровень голода (от 0 до 10, где 0 — животное сыто, 10 — очень голодно).
Добавь конструктор, который принимает тип, имя и инициализирует уровень голода по умолчанию на среднем уровне (например, 5).
Создай метод для кормления животного (feed), который уменьшает уровень голода на указанное количество единиц. Уровень голода не может стать отрицательным.
Добавь метод для игры с животным (play), который увеличивает уровень голода на указанное количество единиц. Уровень голода не может превысить 10.
Создай метод для вывода информации о животном в формате: "Тип: <type>, Имя: <name>, Уровень голода: <hungerLevel>".
Дополнительно можно добавить метод, который проверяет состояние голода животного и выводит рекомендации по кормлению (например, если голод высок — рекомендуется покормить).
Цель: Закрепить работу с классами, которые моделируют реальный мир, включая управление состоянием объекта через методы. Задача поможет освоить логику управления данными и их обновления в зависимости от взаимодействий с объектом. */

void main() {
  Pet cat = Pet(type: 'Кот', name: 'Генри');

  cat.petInfo();
  cat.feed(4);
  cat.feed(5);
  cat.play(2);
  cat.play(7);
  cat.petInfo();
}

class Pet {
  String type;
  String name;
  int hungerLevel; //от 0 до 10, где 0 — животное сыто, 10 — очень голодно

  Pet({required this.type, required this.name, this.hungerLevel = 5});

  void feed(int amount) {
    int newHungerLevel = hungerLevel - amount;
    if (newHungerLevel < 0) {
      print('Уровень голода не может стать отрицательным');
    } else {
      hungerLevel = hungerLevel - amount;
    }
    recomendation();
  }

  void play(int amount) {
    int newHungerLevel = hungerLevel + amount;
    if (newHungerLevel > 10) {
      print('Уровень голода не может превысить 10');
    } else if (newHungerLevel < 0) {
      print('Уровень голода не может стать отрицательным');
    } else {
      hungerLevel = hungerLevel + amount;
    }
    recomendation();
  }

  void petInfo() {
    print('Тип: $type, Имя: $name, Уровень голода: $hungerLevel');
  }

  void recomendation() {
    if (hungerLevel > 7 && hungerLevel <= 10) {
      print('Уровень голода: $hungerLevel. Рекомендуется покормить питомца');
    }
  }
}
