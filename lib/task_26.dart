/* Задача 26: Реализация паттерна "Синглтон" для класса "Конфигурация" (Dart)
Описание задачи:

Создай класс Configuration (Конфигурация):

Этот класс будет использоваться для хранения различных настроек системы. Например, параметры подключения к базе данных, пути к файлам конфигурации, режимы работы приложения и другие глобальные настройки.
Паттерн "Синглтон" гарантирует, что в системе будет только один объект этого класса, к которому можно будет обращаться из любого места программы.
Особенности паттерна "Синглтон":

Единственный экземпляр: класс должен предоставлять только один экземпляр на всё приложение.
Глобальный доступ: к этому экземпляру можно получить доступ из любой части программы через статический метод или переменную.
Приватный конструктор: нужно сделать конструктор класса приватным, чтобы предотвратить создание новых объектов извне.
Приватный конструктор:

Сделай конструктор класса Configuration приватным, чтобы нельзя было создать объект напрямую с помощью оператора new. Это важная часть паттерна "Синглтон", которая гарантирует, что класс может создать объект только один раз.
Создание единственного экземпляра:

В классе должно быть статическое поле, которое хранит единственный экземпляр этого класса.
При первом обращении к этому полю или вызове метода, создается объект класса, а при последующих вызовах возвращается уже существующий объект.
Метод для доступа к экземпляру:

Создай статический метод, например, getInstance(), который будет возвращать единственный экземпляр класса. Этот метод должен проверять, был ли уже создан объект класса. Если объект не существует, он должен быть создан и сохранён в статическое поле.
Если объект уже был создан, метод просто возвращает существующий экземпляр.
Примерные поля класса Configuration:

String databaseUrl — URL для подключения к базе данных.
int maxConnections — максимальное количество подключений к базе данных.
String environment — текущее окружение (например, "production" или "development").
Эти поля могут быть заданы один раз и использованы везде в программе через единственный объект класса Configuration.

Примерные методы класса Configuration:

setConfig() — метод для установки значений конфигурационных параметров (например, URL базы данных, количество подключений и т.д.).
getConfig() — метод для получения текущих значений параметров.
loadConfig() — метод для загрузки конфигурации из файла (например, из JSON или YAML файла), который может быть вызван один раз для инициализации.
Структура класса:

Поле для хранения единственного экземпляра класса должно быть приватным и статическим.
Приватный конструктор класса предотвращает создание дополнительных экземпляров.
Статический метод или геттер предоставляет глобальный доступ к единственному экземпляру класса.
Примерный сценарий использования:

Когда приложение запускается, можно один раз инициализировать конфигурацию с помощью вызова Configuration.getInstance(). Вызовы этого метода в любом месте программы будут возвращать уже созданный экземпляр, и настройки будут доступны глобально. */

void main() {
  Configuration conf1 = Configuration.getInstance();
  conf1.setMaxConnection(10);

  Configuration conf2 = Configuration.getInstance();
  conf2.setMaxConnection(20);

  print(conf1 == conf2);

  print(conf1.getMaxConnections());
}

class Configuration {
  static Configuration? _instance;

  String? _databaseUrl;
  int? _maxConnections;
  String? _environment;

  Configuration._internal();

  static Configuration getInstance() {
    if (_instance == null) {
      _instance = Configuration._internal();
    }
    return _instance!;
  }

  String? getEnvironment() {
    return _environment;
  }

  void setEnvironment(String environment) {
    _environment = environment;
  }

  String? getDatabaseUrl() {
    return _databaseUrl;
  }

  void setDatabaseUrl(String databaseUrl) {
    _databaseUrl = databaseUrl;
  }

  int? getMaxConnections() {
    return _maxConnections;
  }

  void setMaxConnection(int maxConnection) {
    _maxConnections = maxConnection;
  }
}
